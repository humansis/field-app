apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'com.google.firebase.crashlytics'

// ****************** CONFIGURATION ************************ ////

def gitVersionCode = { boolean isFileName ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', 'HEAD', '--count'
        standardOutput = stdout
    }

    def count = stdout.toString().trim().toInteger()

    if (!isFileName)  {
        // Ugly code that needs to be here because previous devs create high version code in google play
        count+=2001000
    }

    println count
    return count
}

// Major updates are non-compatible, meaning consumers can not upgrade without changing their software where applicable.
def VERSION_MAJOR = 2
// Minor updates are backward compatible, meaning consumers can upgrade freely. Main for non-breaking new functionality.
def VERSION_MINOR = 5
// Patch updates are interchangeable, meaning consumers can upgrade or downgrade freely. Mainly for bugfixing.
def VERSION_PATCH = 0

String APK_NAME = "user-app"
String VERSION_NAME = "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
String BUILD_NUMBER = "${gitVersionCode(true)}"
String VERSION_FULL_NAME_FILE = "${APK_NAME}-${VERSION_NAME}.${gitVersionCode(true)}"

repositories {
    google()
    mavenCentral()
}

android {

    compileSdkVersion 30

    ndkVersion "21.3.6528147"

    defaultConfig {
        applicationId "org.humansis.app.user"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode gitVersionCode(false)
        versionName VERSION_NAME
        setProperty("archivesBaseName", VERSION_FULL_NAME_FILE)

        resValue "string", "app_name", "Humansis"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "short", "BUILD_NUMBER", "$BUILD_NUMBER"

        buildConfigField "String", "RELEASE_API_URL", "\"$PROD_RELEASE_API_URL\""

        buildConfigField "String", "FRONT_API_URL", "\"$FRONT_API_URL\""
        buildConfigField "String", "DEMO_API_URL", "\"$DEMO_API_URL\""
        buildConfigField "String", "STAGE_API_URL", "\"$STAGE_API_URL\""
        buildConfigField "String", "TEST_API_URL", "\"$TEST_API_URL\""
        buildConfigField "String", "DEV_API_URL", "\"$DEV_API_URL\""

        buildConfigField "String", "MASTER_KEY", "\"$MASTER_KEY\""
        buildConfigField "String", "APP_ID", "\"$APP_ID\""
        buildConfigField "short", "APP_VESION", "$APP_VERSION"

        buildConfigField "String", "DEMO_ACCOUNT", "\"$DEMO_ACCOUNT\""

        firebaseAppDistribution {
            appId="1:1075203125993:android:e6616d8f23331ac2cb3678"
            releaseNotes="Release notes"
            groups="quanti-android-testers, pin-testers"
        }
    }

    signingConfigs {
        release {
            storeFile file("$RELEASE_STORE_FILE_PATH")
            keyAlias "$RELEASE_STORE_KEY_ALIAS"
            storePassword "$RELEASE_STORE_PASSWORD"
            keyPassword "$RELEASE_STORE_KEY_PASSWORD"
        }
        debug {
            storeFile file(DEBUG_STORE_FILE_PATH)
            keyAlias DEBUG_STORE_KEY_ALIAS
            storePassword DEBUG_STORE_PASSWORD
            keyPassword DEBUG_STORE_KEY_PASSWORD
        }
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

configurations {
    all {
        // exclude old hamcrests (from junit4 etc.) so we can use the newer one without conflicts
        exclude group: "org.hamcrest", module: "hamcrest-core"
        exclude group: "org.hamcrest", module: "hamcrest-library"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'

    //firebase
    implementation 'com.google.firebase:firebase-analytics:19.0.1'
    implementation 'com.google.firebase:firebase-crashlytics:18.2.1'

    // Artifactory
    implementation "cz.quanti.android:nfc:1.2.10"

    // DI
    ext.dagger2_version = '2.28.3'
    implementation "com.google.dagger:dagger:$dagger2_version"
    kapt "com.google.dagger:dagger-compiler:$dagger2_version"

    // Database
    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "com.commonsware.cwac:saferoom.x:1.2.1"

    // ViewModels & Lifecycle
    implementation "androidx.lifecycle:lifecycle-common-java8:2.3.1"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.6.1"
    implementation "com.squareup.retrofit2:converter-gson:2.6.1"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.3'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0'

    // Bar code scanner
    implementation 'me.dm7.barcodescanner:zxing:1.9.8' //use older version until newer are available on mavenCentral

    // Worker
    def work_version = "2.6.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "androidx.work:work-rxjava2:$work_version"

    // Spinner (actually usable one)
    implementation ('com.github.ganfra:material-spinner:2.0.0') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    // Crash reporting - breaks down firebase and crashlytics
//    def acraVersion = '5.1.3'
//    implementation "ch.acra:acra-mail:$acraVersion"
//    implementation "ch.acra:acra-notification:$acraVersion"

    // RX
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.10'
    implementation "android.arch.lifecycle:reactivestreams:1.1.1"

    // Kotlin logger
    implementation "com.github.Qase:KotlinLogger:$kotlin_logger_version"

    def test_version = "1.4.0"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.hamcrest:hamcrest:2.2'
    androidTestImplementation "androidx.test:runner:$test_version"
    androidTestImplementation "androidx.test:core-ktx:$test_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    androidTestImplementation "io.mockk:mockk-android:1.9.3"

}
